import argparse
import sys
import os
import json
from datetime import datetime

# --- 安全なインポート（関数名の揺れに対応） ---
try:
    import utils.scraper as scraper_mod
except Exception as e:
    print("❌ utils.scraper の読み込みに失敗:", e)
    sys.exit(1)

# 最新記事取得関数の候補名（どれか一つでもあれば採用）
LATEST_CANDIDATES = [
    "scrape_latest_articles",
    "scrape_latest",
    "fetch_latest_articles",
    "fetch_latest",
    "get_latest_articles",
    "collect_latest_articles",
    "run",              # まれに run() が最新取得を返すプロジェクトあり
    "scrape"            # 汎用 scrape() が最新を返すケース
]

def resolve_latest_func(mod):
    for name in LATEST_CANDIDATES:
        fn = getattr(mod, name, None)
        if callable(fn):
            return fn, name
    return None, None

latest_func, latest_name = resolve_latest_func(scraper_mod)

# 単発URL用（なければエラー）
scrape_single = getattr(scraper_mod, "scrape_single_article", None)
if not callable(scrape_single):
    print("❌ utils.scraper に scrape_single_article(url) が見つかりません。utils/scraper.py に追加してください。")
    sys.exit(1)

# --- 要約器の読み分け ---
summary_fn = None
try:
    from utils.summarizer_gpt_plus import summarize_with_structure as summary_fn
except Exception:
    try:
        from utils.summarizer_gpt import summarize as summary_fn
    except Exception as e:
        print("❌ 要約モジュールの読み込みに失敗:", e)
        sys.exit(1)

# --- Notion 投稿 ---
post_fn = None
try:
    from utils.notion.post_to_notion import post_to_notion as post_fn
except Exception:
    try:
        from post_to_notion import post_to_notion as post_fn
    except Exception as e:
        print("❌ Notion 投稿モジュールの読み込みに失敗:", e)
        sys.exit(1)

LOG_DIR = "output"
os.makedirs(LOG_DIR, exist_ok=True)
JSON_LOG = os.path.join(LOG_DIR, "sent_log.json")

def append_json_log(entry):
    data = []
    if os.path.exists(JSON_LOG):
        try:
            with open(JSON_LOG, "r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception:
            data = []
    data.append(entry)
    with open(JSON_LOG, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--limit", type=int, default=1, help="Number of articles to fetch")
    parser.add_argument("--url", type=str, help="Fetch a specific article URL")
    args = parser.parse_args()

    # 1) 取得
    if args.url:
        art = scrape_single(args.url)
        articles = [art] if art else []
    else:
        if latest_func is None:
            print("❌ 最新取得関数が見つかりませんでした。utils/scraper.py に次のいずれかの関数を実装してください：")
            print("   ", ", ".join(LATEST_CANDIDATES))
            sys.exit(1)
        # 最新取得関数に limit がある場合/ない場合を両対応
        try:
            articles = latest_func(limit=args.limit)
        except TypeError:
            articles = latest_func()

    if not articles:
        print("⏭️ 新しい記事はありません。終了します。")
        sys.exit(0)

    # 2) 要約（構造化）
    results = []
    for art in articles:
        # 可用キーで安全に吸収
        title = (art.get("title") if isinstance(art, dict) else getattr(art, "title", None)) or "No Title"
        url = (art.get("url") if isinstance(art, dict) else getattr(art, "url", None))
        published_at = (art.get("published_at") if isinstance(art, dict) else getattr(art, "published_at", None))
        content = (art.get("content") if isinstance(art, dict) else getattr(art, "content", None))
        tags = (art.get("tags") if isinstance(art, dict) else getattr(art, "tags", [])) or []

        summ = summary_fn(
            title=title,
            content=content,
            url=url,
            published_at=published_at
        )
        results.append({
            "article": {"title": title, "url": url, "published_at": published_at, "content": content, "tags": tags},
            "summary": summ
        })

    # 3) Notion 登録 & 4) ログ
    for r in results:
        art = r["article"]
        summ = r["summary"]
        notion_resp = post_fn(
            title=art["title"],
            url=art["url"],
            published_at=art["published_at"],
            tags=art["tags"],
            summary=summ.get("summary"),
            background=summ.get("background"),
            key_points=summ.get("key_points"),
            actions=summ.get("actions"),
        )
        log_entry = {
            "title": art["title"],
            "url": art["url"],
            "published_at": art["published_at"],
            "notion_id": notion_resp.get("id") if isinstance(notion_resp, dict) else None,
            "created_at": datetime.utcnow().isoformat() + "Z"
        }
        append_json_log(log_entry)

    print("✅ Notion登録完了 / ログ保存完了",
          f"(latest_func={latest_name if latest_name else 'N/A'})")

if __name__ == "__main__":
    main()
